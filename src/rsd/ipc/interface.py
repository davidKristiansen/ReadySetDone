# SPDX-License-Identifier: MIT
# Copyright David Kristiansen

"""
This module defines the IPC interface protocols for client and server.

These abstract base classes define the methods used for inter-process
communication between the ReadySetDone CLI (rsd) and the daemon (rsdd).

They mirror the public API from `api.task` so that either side can be
plugged in easily, regardless of whether D-Bus, sockets, or another transport is used.
"""

from typing import Awaitable, Callable, Protocol

from rsd.api.types import Id, Task


class IpcClient(Protocol):
    async def add_task(self, task: Task) -> None: ...
    async def delete_task(self, task_id: Id) -> None: ...
    async def update_task(self, task: Task) -> None: ...
    async def mark_done(self, task_id: Id) -> None: ...
    async def mark_not_done(self, task_id: Id) -> None: ...
    async def toggle(self, task_id: Id) -> None: ...
    async def pin(self, task_id: Id) -> None: ...
    async def unpin(self, task_id: Id) -> None: ...
    async def get_description(self, task_id: Id) -> str: ...
    async def set_description(self, task_id: Id, description: str) -> None: ...
    async def list_tasks(self) -> list[Task]: ...

    def on_task_updated(
        self, handler: Callable[[list[Task]], Awaitable[None]]
    ) -> None: ...


class IpcServer(Protocol):
    def register(self, service: object) -> None: ...
    async def start(self) -> None: ...
    async def stop(self) -> None: ...
